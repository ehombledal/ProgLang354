-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParNumbers where
import AbsNumbers
import LexNumbers
import ErrM

}

%name pExp Exp
%name pExp1 Exp1
%name pExp2 Exp2
%name pExp3 Exp3
%name pExp4 Exp4
%name pExp5 Exp5
%name pExp6 Exp6
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '%' { PT _ (TS _ 1) }
  '(' { PT _ (TS _ 2) }
  ')' { PT _ (TS _ 3) }
  '*' { PT _ (TS _ 4) }
  '+' { PT _ (TS _ 5) }
  '-' { PT _ (TS _ 6) }
  '/' { PT _ (TS _ 7) }
  '^' { PT _ (TS _ 8) }

L_integ  { PT _ (TI $$) }


%%

Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }

Exp :: { Exp }
Exp : Exp '+' Exp1 { AbsNumbers.Plus $1 $3 } | Exp1 { $1 }
Exp1 :: { Exp }
Exp1 : Exp1 '-' Exp2 { AbsNumbers.Sub $1 $3 } | Exp2 { $1 }
Exp2 :: { Exp }
Exp2 : Exp2 '*' Exp3 { AbsNumbers.Times $1 $3 } | Exp3 { $1 }
Exp3 :: { Exp }
Exp3 : Exp3 '/' Exp4 { AbsNumbers.Divide $1 $3 } | Exp4 { $1 }
Exp4 :: { Exp }
Exp4 : Exp4 '^' Exp5 { AbsNumbers.Exponent $1 $3 } | Exp5 { $1 }
Exp5 :: { Exp }
Exp5 : Exp5 '%' Exp6 { AbsNumbers.Modulus $1 $3 } | Exp6 { $1 }
Exp6 :: { Exp }
Exp6 : Integer { AbsNumbers.Num $1 } | '(' Exp ')' { $2 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

